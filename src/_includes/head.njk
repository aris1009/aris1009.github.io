<!-- Titolo Automatizzato -->
{%- set pageTitle %}{% if title %}{{title}} {% endif %} - {{meta.siteName}} {% endset -%}
<!-- Descrizione Automatizzata -->
{%- set pageDescription %}{% if description %}{{description}} {% else %}{{meta.siteDescription}} {% endif %}{% endset -%}
<!-- Social Immagine -->
{%- set pageSocialImg %}{{meta.url}} /img/social/{% if title %}{{title | slug}} {% else %}home{% endif %}.png{% endset -%}
<!-- Url della pagina -->
{%- set pageUrls %}{{meta.url}} {{page.url}} {% endset -%}
<!-- Start Head -->
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
<!-- About Page -->
    <title>{{pageTitle}} </title>
    <meta name="description" content="{{pageDescription}}" />
    <meta name="keywords" content="{{pageKeyword}}" />
    <meta name="creation_Date" content="{{meta.creationDate}}" />
<!-- Robot -->
    <meta name="robots" content="{{meta.robots}}" />
<!-- Autore -->
    <meta name="author" content="{{meta.authorName}}" />
<!-- Font -->
    <link rel="preconnect"
          href="https://fonts.gstatic.com/" />
    <link rel="preconnect"
          href="https://fonts.gstatic.com/" crossorigin>
    <link rel="preload"
          as="style"
          href="https://fonts.googleapis.com/css2?family=Roboto+Serif:wght@300;400;500;600;700;800&subset=latin-ext&display=swap" />
    <link rel="stylesheet"
          href="https://fonts.googleapis.com/css2?family=Roboto+Serif:wght@300;400;500;600;700;800&subset=latin-ext&display=swap"
          media="print"
          onload="this.media='all'" />
    <noscript>
        <link rel="stylesheet"
              href="https://fonts.googleapis.com/css2?family=Roboto+Serif:wght@300;400;500;600;700;800&subset=latin-ext&display=swap">
    </noscript>
<!-- CSS -->
    <link rel="preload" href="{{'/css/style.css' | url}}" as="style">
    <link rel="stylesheet" href="{{'/css/style.css' | url}}" media="all">
<!-- Sitemap -->
    <link rel="sitemap"
          type="application/rss+xml"
          title="RSS Feed for {{meta.siteName}} "
          href="{{'/feed.xml' | url}}" />
<!-- Favicon -->
    <link rel="shortcut icon" href="{{'/favicon/favicon.ico' | url}} " sizes="any" />
    <link rel="icon" type="image/svg+xml" href="{{'/favicon/safari-pinned-tab.svg' | url}}" />
<!-- Social -->
    <!-- Open Graph -->
    <meta property="og:type" content="{{type}}" />
    <meta property="og:locale" content="{{meta.language}}" />
    <meta property="og:image" content="{{pageSocialImg}} ">
    <meta property="og:image:width" content="1280" />
    <meta property="og:image:height" content="720" />
    <meta property="og:title" content="{{pageTitle}}" />
    <meta property="og:description" content="{{pageDescription}}" />
    <meta property="og:url" content="{{meta.url}}" />
    <meta property="og:image:alt" content="Immagine per la condivisione sui social">
    <!-- Facebook -->
    <meta property="fb:admins" content="{{meta.facebookUsername}}" />
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@{{meta.twitterUsername}}" />
    <meta name="twitter:creator" content="@{{meta.twitterUsername}}" />
    <meta name="twitter:url" content="">
    <meta name="twitter:title" content="{{pageTitle}}" />
    <meta name="twitter:description" content="{{pageDescription}}" />
    <meta name="twitter:image:src" content="{{pageSocialImg}}" />
    <meta name="twitter:image:alt" content="{{meta.siteName}}  logo" />
    <!-- PWA -->
    <link rel="manifest" href="{{'/manifest.webmanifest' | url}}" />
    <meta name="apple-mobile-web-app-title" content="{{meta.siteName}}">
    <meta name="application-name" content="{{meta.siteName}}">
    <meta name="msapplication-TileColor" content="{{meta.themeColor}}">
    <meta name="theme-color" content="{{meta.themeColor}}">
{% include "favicon.njk" %}
    <!-- Service Worker -->
    <script>
        if ("serviceWorker" in navigator)
            navigator.serviceWorker.register("/sw.js");
    </script>
    
    <!-- Animated Dark Mode Toggle Script -->
    <script>
        // Dark mode toggle functionality with animated pill
        function initTheme() {
            const themeToggleBtn = document.getElementById('theme-toggle');
            
            // Check if element exists
            if (!themeToggleBtn) {
                return;
            }
            
            // Function to apply theme
            function applyTheme(isDark) {
                if (isDark) {
                    document.documentElement.classList.add('dark');
                    themeToggleBtn.classList.add('dark');
                } else {
                    document.documentElement.classList.remove('dark');
                    themeToggleBtn.classList.remove('dark');
                }
            }
            
            // Check for saved theme preference or default to system preference
            const savedTheme = localStorage.getItem('theme');
            const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            
            let isDarkMode;
            if (savedTheme === 'dark') {
                isDarkMode = true;
            } else if (savedTheme === 'light') {
                isDarkMode = false;
            } else {
                // No saved preference, use system preference
                isDarkMode = systemPrefersDark;
            }
            
            // Apply initial theme and sync button state
            applyTheme(isDarkMode);
            
            // Make sure button reflects current state
            if (isDarkMode) {
                themeToggleBtn.classList.add('dark');
            } else {
                themeToggleBtn.classList.remove('dark');
            }
            
            // Toggle theme function
            themeToggleBtn.addEventListener('click', function() {
                const isCurrentlyDark = document.documentElement.classList.contains('dark');
                const newTheme = !isCurrentlyDark;
                
                applyTheme(newTheme);
                
                // Save preference to localStorage
                localStorage.setItem('theme', newTheme ? 'dark' : 'light');
            });
            
            // Listen for system theme changes and update if no user preference is saved
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function(e) {
                const savedTheme = localStorage.getItem('theme');
                if (!savedTheme) {
                    // Only update if user hasn't set a preference
                    applyTheme(e.matches);
                }
            });
        }
        
        // Initialize theme immediately to prevent flash
        (function() {
            const savedTheme = localStorage.getItem('theme');
            const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            
            let isDarkMode;
            if (savedTheme === 'dark') {
                isDarkMode = true;
            } else if (savedTheme === 'light') {
                isDarkMode = false;
            } else {
                isDarkMode = systemPrefersDark;
            }
            
            // Apply theme immediately
            if (isDarkMode) {
                document.documentElement.classList.add('dark');
            } else {
                document.documentElement.classList.remove('dark');
            }
        })();
        
        // Initialize theme toggle when DOM is loaded
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initTheme);
        } else {
            initTheme();
        }

        // Language selector functionality
        function initLanguageSelector() {
            const languageContainer = document.querySelector('.language-selector-container');
            const currentLanguageDisplay = document.getElementById('current-language');
            const languageOptions = document.querySelectorAll('.language-option');
            
            if (!languageContainer || !currentLanguageDisplay) {
                return;
            }

            // Language configuration
            const languages = {
                'en-us': { flag: 'ðŸ‡ºðŸ‡¸' },
                'el': { flag: 'ðŸ‡¬ðŸ‡·' },
                'tr': { flag: 'ðŸ‡¹ðŸ‡·' }
            };

            // Get saved language or default to English
            let currentLanguage = localStorage.getItem('language') || 'en-us';

            // Function to update the current language display
            function updateLanguageDisplay(langCode) {
                const lang = languages[langCode];
                if (lang) {
                    currentLanguageDisplay.innerHTML = `
                        <span class="flag">${lang.flag}</span>
                    `;
                }
            }

            // Initialize display with current language
            updateLanguageDisplay(currentLanguage);

            // Handle language option clicks
            languageOptions.forEach(option => {
                option.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const selectedLang = this.getAttribute('data-lang');
                    
                    if (selectedLang && languages[selectedLang]) {
                        currentLanguage = selectedLang;
                        updateLanguageDisplay(selectedLang);
                        localStorage.setItem('language', selectedLang);
                        
                        // Force dropdown to close immediately after selection
                        languageContainer.style.pointerEvents = 'none';
                        setTimeout(() => {
                            languageContainer.style.pointerEvents = 'auto';
                        }, 300);
                        
                        // Optional: Trigger page reload or language change event
                        // For now, just log the change
                        console.log('Language changed to:', selectedLang);
                    }
                });
            });
        }

        // Initialize language selector when DOM is loaded
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initLanguageSelector);
        } else {
            initLanguageSelector();
        }

        // Burger menu functionality
        function initBurgerMenu() {
            const burgerToggle = document.getElementById('burger-toggle');
            const burgerOverlay = document.getElementById('burger-overlay');
            const burgerButton = document.querySelector('.burger-button');

            if (!burgerToggle || !burgerOverlay) {
                return;
            }

            // Function to toggle burger menu
            function toggleBurgerMenu() {
                const isActive = burgerButton.classList.contains('active');
                
                if (isActive) {
                    // Close menu
                    burgerButton.classList.remove('active');
                    burgerOverlay.classList.remove('active');
                    document.body.style.overflow = '';
                } else {
                    // Open menu
                    burgerButton.classList.add('active');
                    burgerOverlay.classList.add('active');
                    document.body.style.overflow = 'hidden';
                }
            }

            // Burger button click handler
            burgerToggle.addEventListener('click', function(e) {
                e.stopPropagation();
                toggleBurgerMenu();
            });

            // Close menu when clicking on overlay background (not on menu content)
            burgerOverlay.addEventListener('click', function(e) {
                if (e.target === burgerOverlay) {
                    toggleBurgerMenu();
                }
            });

            // Close menu when clicking on navigation links
            const navLinks = document.querySelectorAll('.burger-nav-link');
            navLinks.forEach(link => {
                link.addEventListener('click', function() {
                    // Small delay to allow navigation to start
                    setTimeout(() => {
                        toggleBurgerMenu();
                    }, 150);
                });
            });

            // Close menu with Escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape' && burgerButton.classList.contains('active')) {
                    toggleBurgerMenu();
                }
            });

            // Handle hover effect for burger button
            burgerToggle.addEventListener('mouseenter', function() {
                if (!burgerButton.classList.contains('active')) {
                    burgerButton.style.transform = 'scale(1.05)';
                }
            });

            burgerToggle.addEventListener('mouseleave', function() {
                if (!burgerButton.classList.contains('active')) {
                    burgerButton.style.transform = 'scale(1)';
                }
            });
        }

        // Initialize burger menu when DOM is loaded
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initBurgerMenu);
        } else {
            initBurgerMenu();
        }
    </script>
